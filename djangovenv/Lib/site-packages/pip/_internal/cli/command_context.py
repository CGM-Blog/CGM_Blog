from contextlib import ExitStack, contextmanager
<<<<<<< HEAD
<<<<<<< HEAD
from typing import ContextManager, Iterator, TypeVar
=======
from typing import ContextManager, Generator, TypeVar
>>>>>>> 4de99520aaca5ce9858b6ccccf54e43e7a3f3949
=======
from typing import ContextManager, Generator, TypeVar
>>>>>>> 9782ec403c62ef4c29eda758400b4c33d2033596

_T = TypeVar("_T", covariant=True)


class CommandContextMixIn:
    def __init__(self) -> None:
        super().__init__()
        self._in_main_context = False
        self._main_context = ExitStack()

    @contextmanager
<<<<<<< HEAD
<<<<<<< HEAD
    def main_context(self) -> Iterator[None]:
=======
    def main_context(self) -> Generator[None, None, None]:
>>>>>>> 4de99520aaca5ce9858b6ccccf54e43e7a3f3949
=======
    def main_context(self) -> Generator[None, None, None]:
>>>>>>> 9782ec403c62ef4c29eda758400b4c33d2033596
        assert not self._in_main_context

        self._in_main_context = True
        try:
            with self._main_context:
                yield
        finally:
            self._in_main_context = False

    def enter_context(self, context_provider: ContextManager[_T]) -> _T:
        assert self._in_main_context

        return self._main_context.enter_context(context_provider)
